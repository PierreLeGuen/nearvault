generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  image               String?
  currentTeamId       String?
  accounts            Account[]
  sessions            Session[]
  sentInvitations     TeamInvitation[]  @relation("InvitedByRelation")
  receivedInvitations TeamInvitation[]  @relation("InvitedUserRelation")
  TeamInvitation      TeamInvitation[]
  TransferHistory     TransferHistory[]
  currentTeam         Team?             @relation(fields: [currentTeamId], references: [id])
  teams               UserTeam[]

  @@index([email], map: "emailIndex")
}

model Team {
  id              String            @id @default(cuid())
  name            String
  rpcUrl          String?
  Beneficiary     Beneficiary[]
  invitations     TeamInvitation[]
  TransferHistory TransferHistory[]
  User            User[]
  users           UserTeam[]
  wallets         Wallet[]
}

model Wallet {
  id              String            @id @default(cuid())
  walletAddress   String
  teamId          String
  TransferHistory TransferHistory[]
  team            Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Beneficiary {
  id            String @id @default(cuid())
  walletAddress String
  teamId        String
  firstName     String
  lastName      String
  team          Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model UserTeam {
  userId String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamInvitation {
  id            String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  invitedById   String
  invitedEmail  String
  invitedUserId String?
  teamId        String
  status        InvitationStatus @default(PENDING)
  acceptedAt    DateTime?
  rejectedAt    DateTime?
  userId        String?
  invitedBy     User             @relation("InvitedByRelation", fields: [invitedById], references: [id])
  invitedUser   User?            @relation("InvitedUserRelation", fields: [invitedUserId], references: [id])
  team          Team             @relation(fields: [teamId], references: [id])
  User          User?            @relation(fields: [userId], references: [id])

  @@unique([invitedById, invitedEmail, teamId])
}

model TransferHistory {
  id                  String    @id @default(cuid())
  token               String
  amount              Decimal
  creationDate        DateTime  @default(now())
  approvedDate        DateTime?
  rejectedDate        DateTime?
  memo                String?
  createRequestTxnId  String
  confirmExecuteTxnId String?
  creatorMail         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  teamId              String
  walletId            String
  creator             User      @relation(fields: [creatorMail], references: [email])
  team                Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  wallet              Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([token], map: "tokenIndex")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
